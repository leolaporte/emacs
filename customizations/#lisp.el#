;; Lisp specific packages
;; including sly, paraedit

;; project navigation
;; projectile everywhere!
; (straight-use-package 'projectile)
; (projectile-global-mode)

;; Common Lisp support - btw I use sly
(straight-use-package 'sly)
(setq global-helm-sly-mode t)
(straight-use-package 'helm-sly)

;; locate lisp package
(if (eq system-type 'darwin)
    (setq inferior-lisp-program "/opt/homebrew/bin/sbcl")  ;; MacOS
  (setq inferior-lisp-program "/usr/bin/sbcl"));; Linux

;; makes handling lisp expressions much, much easier
;; Cheatsheet: http://www.emacswiki.org/emacs/PareditCheatsheet
(straight-use-package 'smartparens)
(require 'smartparens-config)

;; colorful parenthesis matching
(straight-use-package 'rainbow-delimiters)

;; eldoc-mode shows documentation in the minibuffer when writing code
;; http://www.emacswiki.org/emacs/ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;;;; Bits from Mark Triggs's .emacs
;;;; Just a couple of things I find useful for Lisp editing.
;;;; https://www.cliki.net/Bits%20from%20Mark%20Triggs%27s%20.emacs

(straight-use-package 'w3m)
(require 'w3m)

(defadvice common-lisp-hyperspec (around hyperspec-lookup-w3m () activate)
  "Browse the Common Lisp HyperSpec using w3m.
When leaving w3m, restore the original window configuration."
  (let* ((window-configuration (current-window-configuration))
         (browse-url-browser-function
          `(lambda (url new-window)
             (unless (member (current-buffer) (w3m-list-buffers))
               (select-window (split-window-vertically)))
             (w3m-browse-url url nil)
             (let ((hs-map (copy-keymap w3m-mode-map)))
               (define-key hs-map (kbd "q")
                 (lambda ()
                   (interactive)
                   (kill-buffer nil)
                   (set-window-configuration ,window-configuration)))
               (use-local-map hs-map)))))
    ad-do-it))

(defun lisp-reindent-defun ()
  "Indent the current defun."
  (interactive)
  (save-excursion
    (beginning-of-defun)
    (indent-sexp)))


;; Highlight "FIXME" comments
(defface fixme-face
  '((t (:weight bold :box (:line-width 2 :color "orange"))))
  "The faced used to show FIXME lines.")

(defun show-fixme-lines (&optional arg)
  "Emphasise FIXME comments.
If ARG is positive, enable highlighting.  If ARG is negative, disable
highlighting.  Otherwise, toggle highlighting."
  (interactive)
  (if (or (and (not arg) (assoc "FIXME" hi-lock-interactive-patterns))
          (and arg (minusp arg)))
      (unhighlight-regexp "FIXME")
    (highlight-phrase "FIXME" 'fixme-face)))


