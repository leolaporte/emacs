;; Object semanticdb-project-database-file-4da07724
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4da07724"
  :tables
  (list
    (semanticdb-table "semanticdb-table-445f15fc"
      :major-mode lisp-mode
      :tags 
        '( ("in-package" code nil nil [489 508])
            ("def-ir1-translator" code nil nil [543 768])
            ("def-ir1-translator" code nil nil [770 2699])
            ("best-sub-source-path" function (:arguments ("form")) nil [3050 3534])
            ("def-ir1-translator" code nil nil [3928 4803])
            ("def-ir1-translator" code nil nil [4994 6106])
            ("parse-tagbody" function (:arguments ("body")) nil [6600 7374])
            ("def-ir1-translator" code nil nil [7594 9168])
            ("def-ir1-translator" code nil nil [9211 9962])
            ("def-ir1-translator" code nil nil [10734 11162])
            ("%funcall-in-foomacrolet-lexenv" function (:arguments ("definitionize-fun" "definitionize-keyword" "definitions" "fun")) nil [11400 12411])
            ("funcall-in-macrolet-lexenv" function (:arguments ("definitions" "fun" "context")) nil [14887 15356])
            ("def-ir1-translator" code nil nil [15358 15850])
            ("symbol-macrolet-definitionize-fun" function (:arguments ("context")) nil [15852 16967])
            ("funcall-in-symbol-macrolet-lexenv" function (:arguments ("definitions" "fun" "context")) nil [16969 17149])
            ("def-ir1-translator" code nil nil [17151 17600])
            ("eval-info-args" function (:arguments ("args")) nil [17795 18014])
            ("def-ir1-translator" code nil nil [18778 20035])
            ("inline-%primitive" function (:arguments ("template" "args")) nil [20037 20912])
            ("def-ir1-translator" code nil nil [20927 21081])
            ("declaim" code nil nil [23272 23349])
            ("defglobal" code nil nil [23350 23405])
            ("name-lambdalike" function (:arguments ("thing")) nil [25515 25882])
            ("enclose" function (:arguments ("start" "next" "funs")) nil [25884 26110])
            ("find-or-convert-fun-leaf" function (:arguments ("thing" "start")) nil [26289 26830])
            ("def-ir1-translator" code nil nil [27078 27248])
            ("def-ir1-translator" code nil nil [27250 27553])
            ("def-ir1-translator" code nil nil [27726 27853])
            ("constant-global-fun-name" function (:arguments ("thing" "lexenv" "extendedp")) nil [28238 28539])
            ("lvar-constant-global-fun-name" function (:arguments ("lvar")) nil [28541 28704])
            ("ensure-source-fun-form" function (:arguments ("source" "lexenv" "coercer" "extendedp" "give-up")) nil [28706 29392])
            ("source-variable-or-else" function (:arguments ("lvar" "fallback")) nil [29394 29774])
            ("ensure-lvar-fun-form" function (:arguments ("lvar" "lvar-name" "coercer" "give-up")) nil [29776 30721])
            ("def-ir1-translator" code nil nil [30737 31808])
            ("def-ir1-translator" code nil nil [31810 31951])
            ("def-ir1-translator" code nil nil [31953 32243])
            ("define-source-transform" code nil nil [32461 32961])
            ("deftransform" code nil nil [32963 33133])
            ("deftransform" code nil nil [33215 33423])
            ("define-source-transform" code nil nil [33425 33547])
            ("declaim" code nil nil [34081 34178])
            ("extract-letish-vars" function (:arguments ("bindings" "context")) nil [34179 35126])
            ("parse-letish" function (:arguments ("bindings" "body" "context")) nil [35128 35487])
            ("def-ir1-translator" code nil nil [37150 37799])
            ("ir1-translate-locally" function (:arguments ("body" "start" "next" "result" "vars" "funs")) nil [38143 38475])
            ("def-ir1-translator" code nil nil [38477 38798])
            ("declaim" code nil nil [39097 39179])
            ("extract-fletish-vars" function (:arguments ("definitions" "context")) nil [39180 40299])
            ("parse-fletish" function (:arguments ("definitions" "body" "context")) nil [40301 40680])
            ("ir1-convert-fbindings" function (:arguments ("start" "next" "result" "funs" "body")) nil [41174 41969])
            ("def-ir1-translator" code nil nil [41971 43392])
            ("def-ir1-translator" code nil nil [43763 45655])
            ("the-in-policy" function (:arguments ("type" "value" "policy" "start" "next" "result")) nil [45747 47510])
            ("def-ir1-translator" code nil nil [47652 48388])
            ("def-ir1-translator" code nil nil [48948 49376])
            ("def-ir1-translator" code nil nil [49417 52366])
            ("def-ir1-translator" code nil nil [52368 52654])
            ("def-ir1-translator" code nil nil [52656 52959])
            ("def-ir1-translator" code nil nil [52961 53155])
            ("def-ir1-translator" code nil nil [53157 54623])
            ("setf" code nil nil [54638 55078])
            ("explode-setq" function (:arguments ("form" "err-fun")) nil [55092 55398])
            ("def-ir1-translator" code nil nil [55557 57471])
            ("setq-var" function (:arguments ("start" "next" "result" "var" "value")) nil [57590 58535])
            ("def-ir1-translator" code nil nil [58757 59026])
            ("def-ir1-translator" code nil nil [59497 60102])
            ("def-ir1-translator" code nil nil [60605 61043])
            ("def-ir1-translator" code nil nil [61192 61487])
            ("def-ir1-translator" code nil nil [61489 62208])
            ("def-ir1-translator" code nil nil [62656 63281])
            ("def-ir1-translator" code nil nil [67808 69491])
            ("def-ir1-translator" code nil nil [70068 70734])
            ("revert-source-path" function (:arguments ("name")) nil [71320 71569]))          
      :file "ir1-translators.lisp"
      :pointmax 71570
      :fsize 71569
      :lastmodtime '(25836 28092 0 0)
      :unmatched-syntax '((semantic-list 66627 . 67778) (semantic-list 65353 . 66567) (semantic-list 63283 . 65351) (symbol 62630 . 62655) (punctuation 62629 . 62630) (symbol 54626 . 54637) (punctuation 54625 . 54626) (semantic-list 35489 . 37148) (semantic-list 23407 . 24570) (semantic-list 12765 . 14885)))
    (semanticdb-table "semanticdb-table-4dd29cfc"
      :major-mode lisp-mode
      :tags 
        '( ("in-package" code nil nil [464 483])
            ("deftype" code nil nil [1242 1306])
            ("define-source-transform" function (:arguments ("fun-name" "lambda-list" "body")) nil [5804 8088])
            ("%define-source-transform" function (:arguments ("fun-name" "lambda")) nil [8089 8309])
            ("deftransform" function (:arguments ("name" "lambda-list" "body-decls-doc")) nil [15677 18380])
            ("deftransforms" function (:arguments ("names" "lambda-list" "body-decls-doc")) nil [18382 19257])
            ("defoptimizer" function (:arguments ("what" "lambda-list" "body")) nil [20406 23147])
            ("defoptimizers" function (:arguments ("kind" "names" "lambda-list" "body")) nil [23149 23930])
            ("do-blocks" function (:arguments ("block-var" "body")) nil [24349 25064])
            ("do-blocks-backwards" function (:arguments ("block-var" "body")) nil [25133 25858])
            ("do-uses" function (:arguments ("node-var" "body")) nil [25938 26304])
            ("do-nodes" function (:arguments ("node-var" "body")) nil [27391 28891])
            ("do-nodes-backwards" function (:arguments ("node-var" "body")) nil [29000 29879])
            ("do-nodes-carefully" function (:arguments ("node-var" "body")) nil [29881 30211])
            ("do-nested-cleanups" function (:arguments ("cleanup-var" "body")) nil [30213 30428])
            ("with-ir1-environment-from-node" function (:arguments ("node" "forms")) nil [30620 30751])
            ("declaim" code nil nil [31367 31409])
            ("*source-paths*" variable nil nil [31410 31433])
            ("with-source-paths" function (:arguments ("forms")) nil [31435 31546])
            ("with-ir1-namespace" function (:arguments ("forms")) nil [31636 31742])
            ("lexenv-find" function (:arguments ("name" "slot" "lexenv" "test" "accessor")) nil [31955 32393])
            ("with-component-last-block" function (:arguments ("component" "body")) nil [32395 32874])
            ("deftype" code nil nil [33116 33147])
            ("encode-attribute-mask" function (:arguments ("names" "universe")) nil [33261 33452])
            ("decode-attribute-mask" function (:arguments ("bits" "universe")) nil [33454 33618])
            ("attributes-union" function (:arguments ("attributes")) nil [36489 36628])
            ("attributes-intersection" function (:arguments ("attributes")) nil [36629 36775])
            ("declaim" code nil nil [36776 36848])
            ("declaim" code nil nil [36849 36879])
            ("attributes=" function (:arguments ("attr1" "attr2")) nil [36880 36933])
            ("event-info" type
               (:members ("name" "description" "var" "count" "level" "action")
                :type "struct")
                nil [37138 37700])
            ("declaim" code nil nil [37701 37735])
            ("define-load-time-global" code nil nil [37796 37862])
            ("declaim" code nil nil [37914 37976])
            ("event-info-or-lose" function (:arguments ("name")) nil [37977 38132])
            ("declaim" code nil nil [38190 38246])
            ("event-count" function (:arguments ("name")) nil [38247 38320])
            ("declaim" code nil nil [38555 38624])
            ("event-action" function (:arguments ("name")) nil [38625 38700])
            ("declaim" code nil nil [38701 38810])
            ("%set-event-action" function (:arguments ("name" "new-value")) nil [38811 38926])
            ("defsetf" code nil nil [38927 38967])
            ("declaim" code nil nil [39183 39246])
            ("event-level" function (:arguments ("name")) nil [39247 39320])
            ("declaim" code nil nil [39321 39403])
            ("%set-event-level" function (:arguments ("name" "new-value")) nil [39404 39517])
            ("defsetf" code nil nil [39518 39556])
            ("defevent" function (:arguments ("name" "description" "level")) nil [39847 40314])
            ("declaim" code nil nil [40384 40437])
            ("*event-note-threshold*" variable (:default-value 1) nil [40438 40471])
            ("event" function (:arguments ("name" "node")) nil [40608 40803])
            ("declaim" code nil nil [40985 41072])
            ("event-statistics" function (:arguments ("min-count" "stream")) nil [41073 41537])
            ("declaim" code nil nil [41539 41603])
            ("clear-event-statistics" function nil nil [41604 41776])
            ("declaim" code nil nil [41870 41908])
            ("find-in" function (:arguments ("next" "element" "list" "key" "test")) nil [42056 42444])
            ("position-in" function (:arguments ("next" "element" "list" "key" "test")) nil [42633 43059])
            ("position-or-lose" function (:arguments ("args")) nil [44495 44596])
            ("*compiler-print-variable-alist*" variable nil nil [44766 45362])
            ("with-compiler-io-syntax" function (:arguments ("forms")) nil [45364 45595]))          
      :file "macros.lisp"
      :pointmax 48568
      :fsize 48567
      :lastmodtime '(25836 28092 0 0)
      :unmatched-syntax '((semantic-list 44067 . 44493) (semantic-list 43061 . 43969) (semantic-list 34181 . 36088) (semantic-list 8522 . 12308) (semantic-list 2032 . 3803))))
  :file "!opt!homebrew!Cellar!sbcl!2.3.8!share!sbcl!src!compiler!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
